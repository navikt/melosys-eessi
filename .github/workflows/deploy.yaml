name: Deploy

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Miljø'
        required: true
        default: 'q2'

env:
  IMAGE: docker.pkg.github.com/${{ github.repository }}/melosys-eessi:${{ github.sha }}
  IMAGE_MANIFEST: https://docker.pkg.github.com/v2/${{ github.repository }}/melosys-eessi/manifests/${{ github.sha }}

jobs:
  check_docker_image_exists:
    name: Check if docker image exists in registry
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "DOCKER_IMAGE_EXISTS_HTTP_STATUS=$(curl -X GET -s -o /dev/null -w "%{http_code}" ${{ env.IMAGE_MANIFEST }} -u ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }})" >> $GITHUB_ENV
      - id: set_output
        run: |
          if [ ${{ env.DOCKER_IMAGE_EXISTS_HTTP_STATUS }} -eq 200 ]
          then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi
    outputs:
      exists: ${{ steps.set_output.outputs.exists }}

  build:
    runs-on: ubuntu-latest
    needs: check_docker_image_exists
    if: needs.check_docker_image_exists.outputs.exists != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up JDK 15
        uses: actions/setup-java@v1
        with:
          java-version: '15.x'
      - name: Setup Maven
        uses: actions/cache@preview
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Test and build
        run: mvn clean package -B -e -U
      - name: Build docker image
        run: |
          docker build -t ${IMAGE} .
      - name: Login to Github Package Registry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
      - name: Push Docker image
        run: |
          docker push ${IMAGE}

  # Deploy til Q2 manuelt eller ved push på master-branch
  deploy_q2:
    name: Deploy til Q2
    needs: build
    if: always() && (needs.build.result == 'success' || needs.build.result == 'skipped') && (github.event.inputs.environment == 'q2' || (github.event_name == 'push' && github.ref == 'refs/heads/master'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Deploy
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: deploy/nais.yaml
          VAR: namespace=q2,ingress=https://melosys-eessi-q2.dev.adeo.no

  # Deploy til Q1 manuelt
  deploy_q1:
    name: Deploy til Q1
    needs: build
    if: always() && (needs.build.result == 'success' || needs.build.result == 'skipped') && github.event.inputs.environment == 'q1'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Deploy
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: deploy/nais.yaml
          VAR: namespace=default,ingress=https://melosys-eessi-q1.dev.adeo.no

  # Deploy til prod manuelt
  deploy_prod:
    name: Deploy til prod
    needs: build
    if: always() && (needs.build.result == 'success' || needs.build.result == 'skipped') && github.event.inputs.environment == 'p'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Deploy
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          RESOURCE: deploy/nais.yaml
          VAR: namespace=default,ingress=https://melosys-eessi.nais.adeo.no
      - run: |
          echo "COMMIT_MSG=$(git log --format=%s -n 1)" >> $GITHUB_ENV
      - name: Slack Notification (deploy success)
        if: success()
        uses: rtCamp/action-slack-notify@v1.0.0
        env:
          SLACK_COLOR: good
          SLACK_USERNAME: Github Actions
          SLACK_ICON: https://github.com/github.png?size=48
          SLACK_TITLE: ':clap: melosys-eessi ble deployet til prod :rocket:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: ${{ env.COMMIT_MSG }}
      - name: Slack Notification (deploy failure)
        if: failure()
        uses: rtCamp/action-slack-notify@v1.0.0
        env:
          SLACK_COLOR: danger
          SLACK_USERNAME: Github Actions
          SLACK_ICON: https://github.com/github.png?size=48
          SLACK_TITLE: ':crying_cat_face: melosys-eessi kunne ikke deployes til prod!'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: ${{ env.COMMIT_MSG }}
