// Generated by delombok at Thu Jul 04 12:27:09 CEST 2024
package no.nav.melosys.eessi.security;

import java.io.IOException;
import java.util.Optional;

import no.nav.security.token.support.client.core.ClientProperties;
import no.nav.security.token.support.client.core.OAuth2GrantType;
import no.nav.security.token.support.client.core.oauth2.OAuth2AccessTokenResponse;
import no.nav.security.token.support.client.core.oauth2.OAuth2AccessTokenService;
import no.nav.security.token.support.client.spring.ClientConfigurationProperties;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpRequest;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;

/**
 * Interceptor som legger til Authorization-header med Bearer-token for en RestTemplate.
 * RestTemplate er deprecated og bør fases ut i favør for WebClient.
 */
@Deprecated
public class ClientRequestInterceptor implements ClientHttpRequestInterceptor {
    @java.lang.SuppressWarnings("all")
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ClientRequestInterceptor.class);
    private final OAuth2AccessTokenService oAuth2AccessTokenService;
    private final ClientProperties clientProperties;

    public ClientRequestInterceptor(ClientConfigurationProperties clientConfigurationProperties, OAuth2AccessTokenService oAuth2AccessTokenService, String clientName) {
        this.oAuth2AccessTokenService = oAuth2AccessTokenService;
        this.clientProperties = Optional.ofNullable(clientConfigurationProperties.getRegistration().get(clientName)).orElseThrow(() -> new RuntimeException("Fant ikke OAuth2-config for " + clientName));
    }

    @Override
    public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {
        request.getHeaders().add(HttpHeaders.AUTHORIZATION, "Bearer " + hentAccessToken());
        return execution.execute(request, body);
    }

    private String hentAccessToken() {
        if (ContextHolder.getInstance().canExchangeOBOToken()) {
            OAuth2AccessTokenResponse response = oAuth2AccessTokenService.getAccessToken(clientProperties);
            return response.getAccessToken();
        } else {
            return hentAccessTokenForSystem();
        }
    }

    private String hentAccessTokenForSystem() {
        var clientPropertiesForSystem = ClientProperties.builder().tokenEndpointUrl(clientProperties.getTokenEndpointUrl()).scope(clientProperties.getScope()).authentication(clientProperties.getAuthentication()).grantType(OAuth2GrantType.CLIENT_CREDENTIALS).build();
        OAuth2AccessTokenResponse response = oAuth2AccessTokenService.getAccessToken(clientPropertiesForSystem);
        return response.getAccessToken();
    }
}
