// Generated by delombok at Thu Jul 04 12:27:09 CEST 2024
package no.nav.melosys.eessi.models.buc

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonProperty
import no.nav.melosys.eessi.controller.dto.SedStatus
import no.nav.melosys.eessi.models.BucType
import no.nav.melosys.eessi.models.SedType
import java.time.ZonedDateTime
import java.util.*
import java.util.function.Predicate
import java.util.stream.Collectors
import java.util.stream.Stream

@JsonIgnoreProperties(ignoreUnknown = true)
class BUC {
    var id: String? = null
    var startDate: ZonedDateTime? = null
    var lastUpdate: ZonedDateTime? = null
    var status: String? = null
    var creator: Creator? = null
    var documents: List<Document> = mutableListOf()
    var actions: List<Action> = ArrayList()

    @JsonProperty("processDefinitionName")
    var bucType: String? = null

    @JsonProperty("processDefinitionVersion")
    var bucVersjon: String? = null
    var participants: Collection<Participant> = ArrayList()
    var internationalId: String? = null
    fun hentAvsenderLand(): String {
        return creator!!.organisation.countryCode
    }

    fun kanOppretteEllerOppdatereSed(sedType: SedType): Boolean {
        return actions.stream().filter { a: Action -> sedType.name.equals(a.documentType, ignoreCase = true) }
            .anyMatch { action: Action ->
                "CREATE".equals(action.operation, ignoreCase = true) || "UPDATE".equals(
                    action.operation,
                    ignoreCase = true
                )
            }
    }

    fun hentDokument(dokumentID: String?): Document {
        return documents.stream().filter { d: Document -> d.id.equals(dokumentID, ignoreCase = true) }.findAny().orElseThrow()
    }

    fun hentSistOppdaterteDocument(): Optional<Document> {
        return documents.stream().filter { d: Document -> SedStatus.erGyldigEngelskStatus(d.status) }.max(sistOppdatert)
    }

    fun erÅpen(): Boolean {
        return !"closed".equals(status, ignoreCase = true)
    }

    fun finnDokumentVedSedType(sedType: String): Optional<Document> {
        return finnDokumenterVedSedType(sedType).min(sorterEtterStatus)
    }

    private fun finnDokumenterVedSedType(sedType: String): Stream<Document> {
        return documents.stream().filter { d: Document -> sedType == d.type }
    }

    fun finnDokumentVedTypeOgStatus(sedType: SedType, status: SedStatus): Optional<Document> {
        return finnDokumenterVedSedType(sedType.name).filter { d: Document -> status.engelskStatus == d.status }.findFirst()
    }

    fun sedKanOppdateres(id: String): Boolean {
        return actions.stream().filter { action: Action -> id == action.documentId }
            .anyMatch { action: Action -> "Update".equals(action.operation, ignoreCase = true) }
    }

    fun harMottattSedTypeAntallDagerSiden(sedType: SedType, minstAntallDagerSidenMottatt: Long): Boolean {
        return finnDokumentVedTypeOgStatus(sedType, SedStatus.MOTTATT).filter { d: Document ->
            d.erAntallDagerSidenOppdatering(
                minstAntallDagerSidenMottatt
            )
        }.isPresent
    }

    fun harSendtSedTypeAntallDagerSiden(sedType: SedType, minstAntallDagerSidenMottatt: Long): Boolean {
        return finnDokumentVedTypeOgStatus(sedType, SedStatus.SENDT).filter { d: Document ->
            d.erAntallDagerSidenOppdatering(
                minstAntallDagerSidenMottatt
            )
        }.isPresent
    }

    fun kanLukkesAutomatisk(): Boolean {
        val bucTypeEnum = BucType.valueOf(bucType!!)
        if (bucTypeEnum == BucType.LA_BUC_06) {
            return harMottattSedTypeAntallDagerSiden(SedType.A006, 30) && kanOppretteEllerOppdatereSed(SedType.X001)
        } else if (bucTypeEnum == BucType.LA_BUC_01) {
            val harMottattA002EllerA011 = harMottattSedTypeAntallDagerSiden(SedType.A002, 60) || harMottattSedTypeAntallDagerSiden(SedType.A011, 60)
            return harMottattA002EllerA011 && kanOppretteEllerOppdatereSed(SedType.X001) && finnSistMottattSED { obj: Document -> obj.erLovvalgSED() }.map { d: Document ->
                d.erAntallDagerSidenOppdatering(
                    60
                )
            }
                .orElse(false)
        } else if (bucTypeEnum == BucType.LA_BUC_03) {
            val harMottattX012EllerSendtX013EllerA008 =
                (finnDokumentVedTypeOgStatus(SedType.X012, SedStatus.MOTTATT).isEmpty || harMottattSedTypeAntallDagerSiden(
                    SedType.X012,
                    30
                )) && (finnDokumentVedTypeOgStatus(SedType.X013, SedStatus.SENDT).isEmpty || harSendtSedTypeAntallDagerSiden(
                    SedType.X013,
                    30
                )) && harSendtSedTypeAntallDagerSiden(SedType.A008, 30)
            return harMottattX012EllerSendtX013EllerA008 && kanOppretteEllerOppdatereSed(SedType.X001)
        }
        return kanOppretteEllerOppdatereSed(SedType.X001)
    }

    private fun finnSistMottattSED(documentPredicate: Predicate<Document>): Optional<Document> {
        return documents.stream().filter { obj: Document -> obj.erInngående() }.filter { obj: Document -> obj.erOpprettet() }
            .filter(documentPredicate).max(Comparator.comparing { obj: Document -> obj.lastUpdate })
    }

    fun finnFørstMottatteSed(): Optional<Document> {
        return documents.stream().filter { obj: Document -> obj.erInngående() }.filter { obj: Document -> obj.erOpprettet() }
            .filter { obj: Document -> obj.erIkkeX100() }
            .min(Comparator.comparing { obj: Document -> obj.creationDate })
    }

    fun hentMottakere(): Set<String> {
        return participants.stream().filter { obj: Participant -> obj.erMotpart() }
            .map { p: Participant -> p.organisation.id }.collect(Collectors.toSet())
    }

    override fun equals(o: Any?): Boolean {
        if (o === this) return true
        if (o !is BUC) return false
        val other = o
        if (!other.canEqual(this as Any)) return false
        val `this$id`: Any? = this.id
        val `other$id`: Any? = other.id
        if (if (`this$id` == null) `other$id` != null else `this$id` != `other$id`) return false
        val `this$startDate`: Any? = this.startDate
        val `other$startDate`: Any? = other.startDate
        if (if (`this$startDate` == null) `other$startDate` != null else `this$startDate` != `other$startDate`) return false
        val `this$lastUpdate`: Any? = this.lastUpdate
        val `other$lastUpdate`: Any? = other.lastUpdate
        if (if (`this$lastUpdate` == null) `other$lastUpdate` != null else `this$lastUpdate` != `other$lastUpdate`) return false
        val `this$status`: Any? = this.status
        val `other$status`: Any? = other.status
        if (if (`this$status` == null) `other$status` != null else `this$status` != `other$status`) return false
        val `this$creator`: Any? = this.creator
        val `other$creator`: Any? = other.creator
        if (if (`this$creator` == null) `other$creator` != null else `this$creator` != `other$creator`) return false
        val `this$documents`: Any = this.documents
        val `other$documents`: Any = other.documents
        if (if (`this$documents` == null) `other$documents` != null else `this$documents` != `other$documents`) return false
        val `this$actions`: Any = this.actions
        val `other$actions`: Any = other.actions
        if (if (`this$actions` == null) `other$actions` != null else `this$actions` != `other$actions`) return false
        val `this$bucType`: Any? = this.bucType
        val `other$bucType`: Any? = other.bucType
        if (if (`this$bucType` == null) `other$bucType` != null else `this$bucType` != `other$bucType`) return false
        val `this$bucVersjon`: Any? = this.bucVersjon
        val `other$bucVersjon`: Any? = other.bucVersjon
        if (if (`this$bucVersjon` == null) `other$bucVersjon` != null else `this$bucVersjon` != `other$bucVersjon`) return false
        val `this$participants`: Any = this.participants
        val `other$participants`: Any = other.participants
        if (if (`this$participants` == null) `other$participants` != null else `this$participants` != `other$participants`) return false
        val `this$internationalId`: Any? = this.internationalId
        val `other$internationalId`: Any? = other.internationalId
        if (if (`this$internationalId` == null) `other$internationalId` != null else `this$internationalId` != `other$internationalId`) return false
        return true
    }

    protected fun canEqual(other: Any?): Boolean {
        return other is BUC
    }

    override fun hashCode(): Int {
        val PRIME = 59
        var result = 1
        val `$id`: Any? = this.id
        result = result * PRIME + (`$id`?.hashCode() ?: 43)
        val `$startDate`: Any? = this.startDate
        result = result * PRIME + (`$startDate`?.hashCode() ?: 43)
        val `$lastUpdate`: Any? = this.lastUpdate
        result = result * PRIME + (`$lastUpdate`?.hashCode() ?: 43)
        val `$status`: Any? = this.status
        result = result * PRIME + (`$status`?.hashCode() ?: 43)
        val `$creator`: Any? = this.creator
        result = result * PRIME + (`$creator`?.hashCode() ?: 43)
        val `$documents`: Any = this.documents
        result = result * PRIME + (`$documents`?.hashCode() ?: 43)
        val `$actions`: Any = this.actions
        result = result * PRIME + (`$actions`?.hashCode() ?: 43)
        val `$bucType`: Any? = this.bucType
        result = result * PRIME + (`$bucType`?.hashCode() ?: 43)
        val `$bucVersjon`: Any? = this.bucVersjon
        result = result * PRIME + (`$bucVersjon`?.hashCode() ?: 43)
        val `$participants`: Any = this.participants
        result = result * PRIME + (`$participants`?.hashCode() ?: 43)
        val `$internationalId`: Any? = this.internationalId
        result = result * PRIME + (`$internationalId`?.hashCode() ?: 43)
        return result
    }

    override fun toString(): String {
        return "BUC(id=" + this.id + ", startDate=" + this.startDate + ", lastUpdate=" + this.lastUpdate + ", status=" + this.status + ", creator=" + this.creator + ", documents=" + this.documents + ", actions=" + this.actions + ", bucType=" + this.bucType + ", bucVersjon=" + this.bucVersjon + ", participants=" + this.participants + ", internationalId=" + this.internationalId + ")"
    }

    companion object {
        private val sistOppdatert: Comparator<Document> = Comparator.comparing { obj: Document -> obj.lastUpdate }
        private val sorterEtterStatus: Comparator<Document> =
            Comparator.comparing { document: Document -> SedStatus.fraEngelskStatus(document.status) }
    }
}
