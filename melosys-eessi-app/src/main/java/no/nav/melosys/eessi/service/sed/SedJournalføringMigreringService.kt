// Generated by delombok at Thu Jul 04 12:27:09 CEST 2024
package no.nav.melosys.eessi.service.sed

import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import no.nav.melosys.eessi.integration.eux.rina_api.EuxConsumer
import no.nav.melosys.eessi.models.SedMottattHendelse
import no.nav.melosys.eessi.repository.SedMottattHendelseRepository
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.scheduling.annotation.Async
import org.springframework.stereotype.Service
import java.io.IOException
import java.net.URISyntaxException
import java.nio.file.Files
import java.nio.file.Paths
import java.time.LocalDateTime
import java.util.*
import kotlin.concurrent.Volatile

@Service
class SedJournalføringMigreringService(
    private val sedMottattHendelseRepository: SedMottattHendelseRepository,
    private val euxConsumer: EuxConsumer
) {
    // PROD:
    // DEV:
    private val `$lock`: Any = arrayOfNulls<Any>(0)
    var naisClusterName: String? = System.getenv().getOrDefault("NAIS_CLUSTER_NAME", "prod-fss")

    var startTidspunktProd: LocalDateTime = LocalDateTime.of(2024, 4, 18, 13, 37)
    var sluttTidspunktProd: LocalDateTime = LocalDateTime.of(2024, 4, 24, 15, 37)
    val fileNameProd: String = "migrering-sed-sendt-prod.json"
    var startTidspunktDev: LocalDateTime = LocalDateTime.of(2024, 4, 1, 13, 37)
    var sluttTidspunktDev: LocalDateTime = LocalDateTime.of(2024, 4, 25, 15, 37)
    val fileNameDev: String = "migrering-sed-sendt-dev.json"
    private val sedMottattMigreringRapportDtoList: MutableList<SedMottattMigreringRapportDto?> = ArrayList()

    @Volatile
    var erKartleggingSedMottattPågående: Boolean = false
    private var antallSedMottattHendelser = 0
    private var antallSedMottattSjekket = 0
    private val sedSendtMigreringRapportDtoList: MutableList<SedSendtMigreringRapportDto?> = ArrayList()

    @Volatile
    var erKartleggingSedSendtPågående: Boolean = false
    private var antallSedSendtHendelser = 0
    private var antallSedSendtSjekket = 0

    @Async
    fun startKartleggingAvSedMottatt() {
        synchronized(this.`$lock`) {
            val startTidspunkt = if (naisClusterName == "prod-fss") startTidspunktProd else startTidspunktDev
            val sluttTidspunkt = if (naisClusterName == "prod-fss") sluttTidspunktProd else sluttTidspunktDev
            val sedMottattHendelseListe: List<SedMottattHendelse?> =
                sedMottattHendelseRepository.findAllByMottattDatoBetween(startTidspunkt, sluttTidspunkt)
            erKartleggingSedMottattPågående = true
            antallSedMottattHendelser = sedMottattHendelseListe.size
            antallSedMottattSjekket = 0
            sedMottattMigreringRapportDtoList.clear()
            log.info(
                "Starter rapportering av sed med vedlegg fra {} til {}. Antall SedMottattHendelser {}",
                startTidspunkt,
                sluttTidspunkt,
                antallSedMottattHendelser
            )
            for (sedMottattHendelse in sedMottattHendelseListe) {
                if (!erKartleggingSedMottattPågående) {
                    break
                }
                kartleggForSedMottattHendelse(sedMottattHendelse!!)
            }
            erKartleggingSedMottattPågående = false
        }
    }

    @Async
    fun startKartleggingAvSedSendt() {
        synchronized(this.`$lock`) {
            erKartleggingSedSendtPågående = true
            antallSedSendtSjekket = 0
            val fileName = if (naisClusterName == "prod-fss") fileNameProd else fileNameDev
            val fileUri = (Objects.requireNonNull(javaClass.classLoader.getResource(fileName))).toURI()
            val content = String(Files.readAllBytes(Paths.get(fileUri)))
            val objectMapper = ObjectMapper()
            val sedSendtJournalføringListe = objectMapper.readValue(content, object : TypeReference<MutableList<SedSendtJournalføringMigrering?>?>() {
            })
            antallSedSendtHendelser = sedSendtJournalføringListe!!.size
            log.info("Starter rapportering av sed sendt med vedlegg fra {}. Antall SedSendtJournalføring {}", fileName, antallSedSendtHendelser)
            for (sedSendtJournalføring in sedSendtJournalføringListe) {
                if (!erKartleggingSedSendtPågående) {
                    break
                }
                val rinaSaksnummer = sedSendtJournalføring!!.rinaSakId
                val dokumentId = sedSendtJournalføring.rinaDokumentId
                val sedMedVedlegg = euxConsumer.hentSedMedVedlegg(rinaSaksnummer, dokumentId)
                if (sedMedVedlegg.vedlegg!!.isNotEmpty()) {
                    log.info("Fant vedlegg for sed med rinaSaksnummer {}, dokumentId {}", rinaSaksnummer, dokumentId)
                    sedSendtMigreringRapportDtoList.add(SedSendtMigreringRapportDto(rinaSaksnummer, dokumentId))
                }
                antallSedSendtSjekket++
            }
        }
    }

    fun stoppSedMottattKartlegging() {
        log.info(
            "Stopp rapportering av sed mottatt med vedlegg. Sjekket {} SED. Funnet {} av {} sed med vedlegg.",
            antallSedMottattSjekket,
            sedMottattMigreringRapportDtoList.size,
            antallSedMottattHendelser
        )
        erKartleggingSedMottattPågående = false
    }

    fun stoppSedMendtKartlegging() {
        log.info(
            "Stopp rapportering av sed sendt med vedlegg. Sjekket {} SED. Funnet {} av {} sed med vedlegg.",
            antallSedSendtSjekket,
            sedSendtMigreringRapportDtoList.size,
            antallSedMottattHendelser
        )
        erKartleggingSedSendtPågående = false
    }

    fun hentStatus(): SedJournalføringMigreringRapportDto {
        return SedJournalføringMigreringRapportDto(
            sedMottattMigreringRapportDtoList,
            sedSendtMigreringRapportDtoList,
            antallSedMottattHendelser,
            antallSedMottattSjekket
        )
    }

    private fun kartleggForSedMottattHendelse(sedMottattHendelse: SedMottattHendelse) {
        val rinaSaksnummer = sedMottattHendelse.sedHendelse.rinaSakId
        val dokumentId = sedMottattHendelse.sedHendelse.rinaDokumentId
        antallSedMottattSjekket++
        val sedMedVedlegg = euxConsumer.hentSedMedVedlegg(rinaSaksnummer, dokumentId)
        if (sedMedVedlegg.vedlegg!!.isNotEmpty()) {
            val journalpostId = sedMottattHendelse.journalpostId
            log.info("Fant vedlegg for sed med rinaSaksnummer {}, dokumentId {} og journalpostid {}", rinaSaksnummer, dokumentId, journalpostId)
            sedMottattMigreringRapportDtoList.add(SedMottattMigreringRapportDto(rinaSaksnummer, dokumentId, journalpostId))
        }
    }

    companion object {
        private val log: Logger = LoggerFactory.getLogger(SedJournalføringMigreringService::class.java)
    }
}
