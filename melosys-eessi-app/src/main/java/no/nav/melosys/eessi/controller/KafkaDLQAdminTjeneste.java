// Generated by delombok at Thu Jul 04 12:27:09 CEST 2024
package no.nav.melosys.eessi.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import no.nav.melosys.eessi.controller.dto.KafkaDLQDto;
import no.nav.melosys.eessi.models.kafkadlq.KafkaDLQ;
import no.nav.melosys.eessi.service.kafkadlq.KafkaDLQService;
import no.nav.security.token.support.core.api.Unprotected;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@Unprotected
@RestController
@RequestMapping("/admin/kafka/dlq")
@Profile("!local-q2")
public class KafkaDLQAdminTjeneste {
    @java.lang.SuppressWarnings("all")
    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(KafkaDLQAdminTjeneste.class);
    private static final String API_KEY_HEADER = "X-MELOSYS-ADMIN-APIKEY";
    private final KafkaDLQService kafkaDLQService;
    @Value("${melosys.admin.api-key}")
    private String apiKey;

    @GetMapping
    public ResponseEntity<List<KafkaDLQDto>> hentFeiledeMeldinger(@RequestHeader(API_KEY_HEADER) String apiKey) {
        validerApikey(apiKey);
        return ResponseEntity.ok(kafkaDLQService.hentFeiledeKafkaMeldinger().stream().map(this::mapEntitetTilDto).toList());
    }

    @PostMapping("/{uuid}/restart")
    public ResponseEntity<Void> rekjørKafkaMelding(@PathVariable String uuid, @RequestHeader(API_KEY_HEADER) String apiKey) {
        validerApikey(apiKey);
        kafkaDLQService.rekjørKafkaMelding(UUID.fromString(uuid));
        return ResponseEntity.ok().build();
    }

    @PostMapping("/restart/alle")
    public ResponseEntity<Map<String, Object>> rekjørAlleKafkaMelding(@RequestHeader(API_KEY_HEADER) String apiKey) {
        validerApikey(apiKey);

        List<UUID> vellykket = new ArrayList<>();
        List<String> feilet = new ArrayList<>();

        kafkaDLQService.hentFeiledeKafkaMeldinger().forEach(kafkaDLQ -> {
            try {
                kafkaDLQService.rekjørKafkaMelding(kafkaDLQ.getId());
                vellykket.add(kafkaDLQ.getId());
            } catch (Exception e) {
                feilet.add(kafkaDLQ.getId() + ": " + e.getMessage());
                log.error("Feil ved rekjøring av melding med ID {}: {}", kafkaDLQ.getId(), e.getMessage(), e);
            }
        });

        Map<String, Object> resultat = Map.of(
            "antallVellykket", vellykket.size(),
            "antallFeilet", feilet.size(),
            "vellykkedeMeldinger", vellykket,
            "feiledeMeldinger", feilet
        );

        return ResponseEntity.ok(resultat);
    }

    private KafkaDLQDto mapEntitetTilDto(KafkaDLQ entitet) {
        try {
            return KafkaDLQDto.builder().id(entitet.getId().toString()).queueType(entitet.getQueueType()).sisteFeilmelding(entitet.getSisteFeilmelding()).tidRegistrert(entitet.getTidRegistrert()).tidSistRekjort(entitet.getTidSistRekjort()).antallRekjoringer(entitet.getAntallRekjoringer()).melding(entitet.hentMeldingSomStreng()).skip(entitet.getSkip()).build();
        } catch (final java.lang.Throwable $ex) {
            throw lombok.Lombok.sneakyThrow($ex);
        }
    }

    private void validerApikey(String value) {
        if (!apiKey.equals(value)) {
            throw new SecurityException("Ugyldig API-nøkkel");
        }
    }

    @java.lang.SuppressWarnings("all")
    public KafkaDLQAdminTjeneste(final KafkaDLQService kafkaDLQService) {
        this.kafkaDLQService = kafkaDLQService;
    }
}
