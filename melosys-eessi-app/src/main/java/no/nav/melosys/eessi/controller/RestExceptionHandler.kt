// Generated by delombok at Thu Jul 04 12:27:09 CEST 2024
package no.nav.melosys.eessi.controller

import no.nav.melosys.eessi.models.exception.IntegrationException
import no.nav.melosys.eessi.models.exception.MappingException
import no.nav.melosys.eessi.models.exception.NotFoundException
import no.nav.melosys.eessi.models.exception.ValidationException
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.ControllerAdvice
import org.springframework.web.bind.annotation.ExceptionHandler

@ControllerAdvice
class RestExceptionHandler {
    @ExceptionHandler(NotFoundException::class)
    fun handle(e: NotFoundException): ResponseEntity<*> {
        return handle(e, HttpStatus.NOT_FOUND)
    }

    @ExceptionHandler(MappingException::class)
    fun handle(e: MappingException): ResponseEntity<*> {
        return handle(e, HttpStatus.BAD_REQUEST)
    }

    @ExceptionHandler(ValidationException::class)
    fun handle(e: ValidationException): ResponseEntity<*> {
        return handle(e, HttpStatus.BAD_REQUEST)
    }

    @ExceptionHandler(IntegrationException::class)
    fun handle(e: IntegrationException): ResponseEntity<*> {
        return handle(e, HttpStatus.INTERNAL_SERVER_ERROR)
    }

    @ExceptionHandler(Exception::class)
    fun handle(e: Exception): ResponseEntity<*> {
        return handle(e, HttpStatus.INTERNAL_SERVER_ERROR)
    }

    private fun handle(e: Exception, httpStatus: HttpStatus): ResponseEntity<Map<String, String?>> {
        val message = e.message ?: e.javaClass.simpleName

        if (httpStatus == HttpStatus.CONFLICT) {
            log.warn("Ressursen har ikke forventet tilstand: $message", e)
        } else {
            log.error("Feil oppst√•tt: $message", e)
        }

        val entity = mapOf<String, String?>(
            "error" to httpStatus.reasonPhrase,
            "message" to message
        )
        return ResponseEntity(entity, httpStatus)
    }

    companion object {
        private val log: Logger = LoggerFactory.getLogger(RestExceptionHandler::class.java)
    }
}
