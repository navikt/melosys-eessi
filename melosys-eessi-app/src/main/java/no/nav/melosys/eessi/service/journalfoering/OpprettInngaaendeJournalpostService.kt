// Generated by delombok at Thu Jul 04 12:27:09 CEST 2024
package no.nav.melosys.eessi.service.journalfoering

import no.nav.melosys.eessi.integration.journalpostapi.OpprettJournalpostResponse
import no.nav.melosys.eessi.integration.sak.Sak
import no.nav.melosys.eessi.kafka.consumers.SedHendelse
import no.nav.melosys.eessi.models.vedlegg.SedMedVedlegg
import no.nav.melosys.eessi.service.journalpostkobling.JournalpostSedKoblingService
import no.nav.melosys.eessi.service.saksrelasjon.SaksrelasjonService
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

@Service
class OpprettInngaaendeJournalpostService @Autowired constructor(
    private val saksrelasjonService: SaksrelasjonService,
    private val journalpostService: JournalpostService,
    private val journalpostSedKoblingService: JournalpostSedKoblingService
) {
    fun arkiverInngaaendeSedHentSakinformasjon(sedMottatt: SedHendelse, sedMedVedlegg: SedMedVedlegg, personIdent: String): SakInformasjon {
        val arkivsak = saksrelasjonService.finnArkivsakForRinaSaksnummer(sedMottatt.rinaSakId)
        log.info("Midlertidig journalf√∏rer rinaSak {}", sedMottatt.rinaSakId)
        val response = opprettJournalpostLagreRelasjon(sedMottatt, arkivsak.orElse(null), sedMedVedlegg, personIdent)
        log.info("Midlertidig journalpost opprettet med id {}", response!!.journalpostId)
        val dokumentId = if (response.dokumenter == null) "ukjent" else response.dokumenter[0].dokumentInfoId
        return SakInformasjon.Companion.builder().journalpostId(response.journalpostId).dokumentId(dokumentId)
            .gsakSaksnummer(arkivsak.map<String?> { obj: Sak? -> obj!!.id }
                .orElse(null)).build()
    }

    fun arkiverInngaaendeSedUtenBruker(sedHendelse: SedHendelse, sedMedVedlegg: SedMedVedlegg, personIdent: String): String {
        return opprettJournalpostLagreRelasjon(sedHendelse, null, sedMedVedlegg, personIdent)!!.journalpostId
    }

    private fun opprettJournalpostLagreRelasjon(
        sedMottatt: SedHendelse,
        sak: Sak?,
        sedMedVedlegg: SedMedVedlegg,
        personIdent: String
    ): OpprettJournalpostResponse? {
        val response = journalpostService.opprettInngaaendeJournalpost(sedMottatt, sak, sedMedVedlegg, personIdent)
        lagreJournalpostRelasjon(sedMottatt, response)
        return response
    }

    private fun lagreJournalpostRelasjon(sedHendelse: SedHendelse, opprettJournalpostResponse: OpprettJournalpostResponse?) {
        journalpostSedKoblingService.lagre(
            opprettJournalpostResponse!!.journalpostId,
            sedHendelse.rinaSakId,
            sedHendelse.rinaDokumentId,
            sedHendelse.rinaDokumentVersjon,
            sedHendelse.bucType,
            sedHendelse.sedType
        )
    }

    companion object {
        private val log: Logger = LoggerFactory.getLogger(OpprettInngaaendeJournalpostService::class.java)
    }
}
